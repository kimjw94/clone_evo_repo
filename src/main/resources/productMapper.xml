<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.market.evo.product.ProductMapper">

	<!-- categoryName -->
	<select id="categoryList" resultType="map">
		select * from evo_category
	</select>

	<!-- detailCategoryName -->
	<select id="detailCateList" parameterType="int" resultType="map">
		select d_category_detail_code, d_category_detail_name
		from
		evo_category_detail
		where d_category_code = #{c_category_code}
	</select>

	<!-- 상품 추가 -->
	<insert id="addProduct"
		parameterType="com.market.evo.product.Product">
		insert into evo_product
		values (
		seq_p_product_no.nextval,
		#{p_product_name},
		#{p_m_id},
		#{p_category_code},
		#{p_price},
		#{p_info},
		default,
		default,
		default
		)
	</insert>

	<!-- 상품 이미지 추가 -->
	<insert id="addImage" parameterType="map">
		insert into
		evo_product_image(im_p_product_no, im_thumbnail_image
		<if test="im_info_image != null">
			,im_info_image
		</if>
		)
		values(
		#{im_p_product_no},
		#{im_thumbnail_image}

		<if test="im_info_image != null">
			,#{im_info_image}
		</if>

		)
	</insert>

	<insert id="addInventory" parameterType="map">
		insert into
		evo_product_inventory
		values(
		#{i_p_product_no},
		#{i_product_color},
		#{i_product_size},
		#{i_product_count}
		)
	</insert>

	<!-- 상품 번호 불러오는거 -->
	<select id="getProNo"
		parameterType="com.market.evo.product.Product" resultType="int">
		select
		p_product_no
		from evo_product
		where p_addDay = (select max(p_addDay)
		from (
		select p_addDay
		from evo_product
		where p_product_name =
		#{p_product_name}
		and p_m_id = #{p_m_id}
		and p_category_code =
		#{p_category_code}))
	</select>

	<select id="idViewProduct" parameterType="String"
		resultType="map">
		select p.p_view, p.p_price, p.p_product_name,
		p.p_product_no,
		i.im_thumbnail_image
		from evo_product p,
		evo_product_image i, evo_member m
		where p.p_product_no =
		i.im_p_product_no
		and m.m_id = p.p_m_id
		and p.p_m_id = #{p_m_id}

	</select>


	<!-- 삼풍 상세정보 불러오기 (재고 빼고) -->
	<select id="detailProduct" parameterType="int" resultType="map">
		select p.p_product_no, p.p_product_name, p.p_price, p.p_info,
		c.c_category_name, c.c_category_code,
		d.d_category_detail_name, d.d_category_detail_code,
		im.im_thumbnail_image, im.im_info_image
		from evo_product p, evo_product_image im,
		evo_category c, evo_category_detail d
		where p.p_product_no = #{p_product_no}
		and p.p_category_code = d.d_category_detail_code
		and d.d_category_code = c.c_category_code
		and im.im_p_product_no = p.p_product_no
	</select>

	<!-- 재고만 따로 불러오기 -->
	<select id="detailInventory" parameterType="int"
		resultType="map">
		select * from evo_product_inventory
		where i_p_product_no = #{p_product_no}
	</select>

	<!-- 재고만 업데이트 -->
	<update id="updateInven" parameterType="map">
		update
		evo_product_inventory
		set i_product_size = #{i_product_size},
		i_product_color = #{i_product_color},
		i_product_count = #{i_product_count}
		where i_product_size = #{i_product_sizeo}
		and i_product_color = #{i_product_coloro}
		and i_product_count = #{i_product_counto}
		and i_p_product_no = #{i_product_no}
	</update>

	<!-- 상품만 수정 -->
	<update id="updatePro"
		parameterType="com.market.evo.product.Product">
		update evo_product
		set p_product_name = #{p_product_name},
		p_price = #{p_price},
		p_info = #{p_info},
		p_updateDay = default
		where p_product_no = #{p_product_no}
	</update>

	<!-- 썸네일 이미지만 수정 -->
	<update id="updateThumbImg" parameterType="map">
		update
		evo_product_image
		set im_thumbnail_image = #{im_thumbnail_image}
		where im_p_product_no = #{im_p_product_no}
	</update>

	<!-- 상품설명 이미지만 수정 -->
	<update id="updateInfoImg" parameterType="map">
		update
		evo_product_image
		set im_info_image = #{im_info_image}
		where im_p_product_no = #{im_p_product_no}
	</update>

	<!-- 재고 삭제 -->
	<delete id="deleteInven" parameterType="map">
		delete from
		evo_product_inventory
		where i_product_size = #{i_product_sizeo}
		and i_product_color = #{i_product_coloro}
		and i_product_count = #{i_product_counto}
		and i_p_product_no = #{i_product_no}
	</delete>

	<delete id="deleteInv" parameterType="int">
		delete from
		evo_product_inventory
		where i_p_product_no = #{p_product_no}
	</delete>

	<!-- 상품 삭제 -->
	<delete id="deletePro" parameterType="int">
		delete from evo_product
		where p_product_no = #{p_product_no}
	</delete>

	<delete id="deleteImg" parameterType="int">
		delete from
		evo_product_image
		where im_p_product_no = #{p_product_no}
	</delete>


	<!--상의라는 카테고리에 포함되는 상품정보,상품이미지 가져오기 -->
	<select id="getProductsWithImagebyCategory" resultType="map">
		select
		p.*, I.IM_THUMBNAIL_IMAGE
		from evo_product p join evo_category_detail d
		on p.p_category_code = d.d_category_detail_code
		join evo_category c on
		c.c_category_code = d.d_category_code
		join evo_product_image i on
		p.p_product_no = i.im_p_product_no
		where p.p_category_code =
		d.d_category_detail_code
		and d.d_category_code = c.c_category_code
		and
		c.c_category_name= #{categoryName}
	</select>

	<select id="getProductswithImagebyDetailCategory"
		resultType="map">
		select p.*, I.IM_THUMBNAIL_IMAGE
		from evo_product p
		join
		evo_category_detail d on p.p_category_code = d.d_category_detail_code
		join evo_product_image i on p.p_product_no = i.im_p_product_no
		where
		p.p_category_code = d.d_category_detail_code
		and
		d.d_category_detail_name= #{categoryDetailName}
	</select>

	<select id="getProductDetail" resultType="map">
		SELECT
		p.p_product_no,
		p.p_product_name,
		p.p_m_id,
		p.p_price,
		p.p_info,
		p.p_view,
		im.im_thumbnail_image,
		im.im_info_image,
		c.c_category_name,
		cd.d_category_detail_name
		FROM
		EVO_PRODUCT p
		JOIN
		EVO_PRODUCT_IMAGE im ON
		p.p_product_no = im.im_p_product_no
		JOIN
		EVO_CATEGORY_DETAIL cd ON
		p.p_category_code = cd.d_category_detail_code
		JOIN
		EVO_CATEGORY c ON
		cd.d_category_code = c.c_category_code
		WHERE
		p.p_product_no =
		#{productNo}
	</select>

	<select id="getProductInventory" resultType="map">

		SELECT
		i_product_color,
		i_product_size
		FROM
		evo_product_inventory
		WHERE
		i_p_product_no = #{productNo}

	</select>



	<insert id="insertProductOrder_NonMember"
		parameterType="com.market.evo.product.ProductOrder_NonMember">
		INSERT INTO
		productOrder_NonMember(NOrder_number,NOrder_productNo,
		NOrder_productName,
		NOrder_productColor, NOrder_productSize,
		NOrder_productQuantity,
		NOrder_productPrice,NOrder_cookieID)
		VALUES (
		productnorder_seq.nextval,
		#{NOrder_productNo, jdbcType=NUMERIC},
		#{NOrder_productName},
		#{NOrder_productColor},
		#{NOrder_productSize},
		#{NOrder_productQuantity},
		#{NOrder_productPrice, jdbcType=NUMERIC},
		#{NOrder_cookieID}
		)
	</insert>



	<insert id="insertProductOrder_Member"
		parameterType="com.market.evo.product.ProductOrder_Member">
		Insert Into
		productOrder_Member(memberOrder_number,memberOrder_productNo,
		memberOrder_productName,memberOrder_productColor,memberOrder_productSize,
		memberorder_productQuantity,memberOrder_productPrice,memberOrder_memberId)
		values(
		productorder_seq.nextval,
		#{memberOrder_productNo,
		jdbcType=NUMERIC},
		#{memberOrder_productName},
		#{memberOrder_productColor},
		#{memberOrder_productSize},
		#{memberOrder_productQuantity},
		#{memberOrder_productPrice,
		jdbcType=NUMERIC},
		#{memberOrder_memberId})

	</insert>

	<select id="selectProductOrdersByCookieID" resultType="map">
		SELECT
		nom.NOrder_number,
		nom.NOrder_productNo,
		nom.NOrder_cookieID,
		nom.NOrder_productName,
		nom.NOrder_productColor,
		nom.NOrder_productSize,
		nom.NOrder_productQuantity,
		nom.NOrder_productPrice,
		epi.im_thumbnail_image
		FROM
		productOrder_NonMember nom
		INNER JOIN
		evo_product_image epi ON nom.NOrder_productNo = epi.im_p_product_no
		WHERE
		nom.NOrder_cookieID = #{cookieID}
	</select>
	
	<select id="selectProductOrdersByID" resultType="map">
		SELECT
		om.memberOrder_Number,
		om.memberOrder_productNo,
		om.memberOrder_memberId,
		om.memberOrder_productName,
		om.memberOrder_productColor,
		om.memberOrder_productSize,
		om.memberOrder_productQuantity,
		om.memberOrder_productPrice,
		epi.im_thumbnail_image
		FROM
		productOrder_Member om
		INNER JOIN
		evo_product_image epi ON om.memberOrder_productNo = epi.im_p_product_no
		WHERE
		om.memberOrder_memberId = #{mebmerID}
	</select>
	
	
<insert id="insertPayedOrder" parameterType="com.market.evo.product.PayedOrder">
    insert into payedOrder values(payedOrder_seq.nextval,#{p_orderID},#{p_orderNum},#{p_orderName},#{p_orderPhone},
    #{p_orderAddressNum},#{p_orderAddress},#{p_productNames},#{p_totalAmount})
</insert>
</mapper>
